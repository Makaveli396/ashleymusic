import json
import os
from uuid import uuid4
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)

# --- Configuración ---
# Usar variables de entorno para mayor seguridad
BOT_TOKEN = os.getenv("BOT_TOKEN", "8002658257:AAHxJYxhdrxi2FF9hqgc9AfRRhbdhgBTy3k")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7312942188"))
PORT = os.getenv("PORT", "8000")

# Fichero de cola - usar /tmp en Render para persistencia temporal
COLA_PATH = "/tmp/cola.json"

# Estados de conversación para solicitar canción
ESPERANDO_CANCION = range(1)

# --- Funciones de Utilidad ---

def cargar_cola():
    """Carga la cola de canciones desde el fichero JSON."""
    if not os.path.exists(COLA_PATH):
        return []
    try:
        with open(COLA_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return []

def guardar_cola(cola):
    """Guarda la cola de canciones en el fichero JSON."""
    try:
        # Crear directorio si no existe
        os.makedirs(os.path.dirname(COLA_PATH), exist_ok=True)
        with open(COLA_PATH, "w", encoding="utf-8") as f:
            json.dump(cola, f, indent=2, ensure_ascii=False)
    except Exception as e:
        print(f"Error al guardar cola: {e}")

def formatear_peticion(peticion):
    """Formatea una única petición para mostrarla en la cola."""
    return f"🎶 *{peticion['cancion']}*\n👤 {peticion['usuario']}"

def teclado_principal():
    """Crea y devuelve el teclado con los botones principales."""
    botones = [
        ["🥡 Pedir canción"],
        ["📋 Ver Cola"],
        ["🎤 Cómo pedir", "ℹ️ Información"]
    ]
    return ReplyKeyboardMarkup(botones, resize_keyboard=True)

# --- Comandos y Botones ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja el comando /start y muestra el menú principal."""
    bienvenida = (
        "¡Hola Group!\n\n"
        "Bienvenido al Bot de Peticiones Musicales 🎶\n\n"
        "Aquí puedes pedir canciones fácilmente para que el administrador las tenga en cuenta.\n\n"
        "Tu petición será añadida a la cola y solo el admin podrá verla para organizar mejor el orden.\n\n"
        "¡Usa los botones para navegar!"
    )
    await update.message.reply_text(bienvenida, reply_markup=teclado_principal())

async def ver_cola(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra las últimas 10 canciones en la cola."""
    cola = cargar_cola()
    if not cola:
        await update.message.reply_text("📭 La cola de peticiones está vacía.", reply_markup=teclado_principal())
    else:
        # Mostramos solo las últimas 10 para no saturar el chat
        ultimas_peticiones = cola[-10:]
        lista_texto = [f"{i+1}. {formatear_peticion(p)}" for i, p in enumerate(ultimas_peticiones)]
        mensaje = "📋 *Últimas canciones solicitadas:*\n\n" + "\n\n".join(lista_texto)
        await update.message.reply_text(mensaje, parse_mode="Markdown", reply_markup=teclado_principal())

async def como_pedir(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra instrucciones sobre cómo pedir una canción."""
    mensaje = (
        "🎤 *¿Cómo pedir una canción?*\n\n"
        "1. Pulsa el botón '🥡 Pedir canción'.\n"
        "2. Escribe el nombre de la canción y el artista (si lo sabes).\n"
        "3. ¡Envíalo y listo! Tu petición se añadirá a la cola."
    )
    await update.message.reply_text(mensaje, parse_mode="Markdown", reply_markup=teclado_principal())

async def informacion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra información sobre el bot."""
    mensaje = (
        "ℹ️ *Información del Bot*\n\n"
        "Este bot fue creado para gestionar peticiones musicales en el grupo.\n"
        "Todas las solicitudes se guardan en una cola para que el admin pueda verlas."
    )
    await update.message.reply_text(mensaje, parse_mode="Markdown", reply_markup=teclado_principal())

# --- Proceso de Solicitud de Canción (Conversación) ---

async def iniciar_solicitud(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Inicia la conversación para solicitar una canción."""
    await update.message.reply_text("🎵 Escribe el nombre de la canción que deseas solicitar:", reply_markup=ReplyKeyboardRemove())
    return ESPERANDO_CANCION

async def recibir_cancion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Recibe el nombre de la canción, la guarda y notifica al admin."""
    cancion = update.message.text
    user = update.effective_user
    chat = update.effective_chat

    peticion = {
        "id": str(uuid4()),
        "usuario": user.first_name,
        "username": user.username or "anonimo",
        "cancion": cancion,
        "grupo": chat.title or "Chat Privado"
    }

    cola = cargar_cola()
    cola.append(peticion)
    guardar_cola(cola)

    await update.message.reply_text(f"✅ ¡Tu solicitud para *{cancion}* ha sido registrada con éxito!", parse_mode="Markdown", reply_markup=teclado_principal())

    # Notificar al admin
    try:
        mensaje_admin = (
            f"📥 Nueva solicitud de canción\n"
            f"👤 *Usuario:* {user.first_name} (@{user.username or 'anonimo'})\n"
            f"🎶 *Canción:* {cancion}\n"
            f"💬 *Chat:* {chat.title or 'Privado'}"
        )
        await context.bot.send_message(chat_id=ADMIN_ID, text=mensaje_admin, parse_mode="Markdown")
    except Exception as e:
        print(f"Error al notificar al admin: {e}")

    return ConversationHandler.END

async def cancelar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancela la operación actual (solicitud de canción)."""
    await update.message.reply_text("❌ Solicitud cancelada.", reply_markup=teclado_principal())
    return ConversationHandler.END

# --- Lanzador del Bot ---

def main():
    """Construye y lanza el bot."""
    print(f"🚀 Iniciando bot en puerto {PORT}")
    print(f"🔑 Token configurado: {'✅' if BOT_TOKEN else '❌'}")
    print(f"👤 Admin ID: {ADMIN_ID}")
    
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # Conversación para solicitar canciones
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^🥡 Pedir canción$'), iniciar_solicitud)],
        states={
            ESPERANDO_CANCION: [MessageHandler(filters.TEXT & ~filters.COMMAND, recibir_cancion)]
        },
        fallbacks=[CommandHandler("cancelar", cancelar)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Regex('^📋 Ver Cola$'), ver_cola))
    app.add_handler(MessageHandler(filters.Regex('^🎤 Cómo pedir$'), como_pedir))
    app.add_handler(MessageHandler(filters.Regex('^ℹ️ Información$'), informacion))

    print("🤖 El bot se ha iniciado y está listo.")
    app.run_polling()

if __name__ == "__main__":
    main()